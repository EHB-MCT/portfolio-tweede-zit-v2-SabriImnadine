name: CI/CD Pipeline

on:
  push:
    branches: [dev]

env:
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  POSTGRES_DB: mydatabase
  POSTGRES_HOST_AUTH_METHOD: trust
  PG_CONNECTION_STRING: postgres://myuser:mypassword@store:5432/mydatabase

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Create .env file
        run: |
          mkdir -p images/api
          echo POSTGRES_USER=$POSTGRES_USER > images/api/.env
          echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> images/api/.env
          echo POSTGRES_DB=$POSTGRES_DB >> images/api/.env
          echo POSTGRES_HOST_AUTH_METHOD=$POSTGRES_HOST_AUTH_METHOD >> images/api/.env
          echo PG_CONNECTION_STRING=$PG_CONNECTION_STRING >> images/api/.env
      - name: Verify .env file
        run: cat images/api/.env

      - name: List files before npm install
        run: |
          echo "Listing files in images/api before npm install:"
          ls -la images/api
      - name: Install dependencies
        run: |
          cd images/api
          npm install
          cd ../..
      - name: List files after npm install
        run: |
          echo "Listing files in images/api after npm install:"
          ls -la images/api
      - name: Verify .env file before build
        run: |
          echo "Verifying .env file before build:"
          ls -la images/api/.env
          cat images/api/.env
      - name: Build docker containers
        run: |
          echo "Listing files before docker-compose build:"
          ls -la images/api
          cd images/api
          docker-compose --env-file .env build
      - name: Run docker containers and execute tests
        run: |
          cd images/api
          docker-compose --env-file .env up --abort-on-container-exit --exit-code-from api

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Create .env file
        run: |
          mkdir -p images/api
          echo POSTGRES_USER=$POSTGRES_USER > images/api/.env
          echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> images/api/.env
          echo POSTGRES_DB=$POSTGRES_DB >> images/api/.env
          echo POSTGRES_HOST_AUTH_METHOD=$POSTGRES_HOST_AUTH_METHOD >> images/api/.env
          echo PG_CONNECTION_STRING=$PG_CONNECTION_STRING >> images/api/.env
      - name: Verify .env file
        run: cat images/api/.env

      - name: List files before npm install
        run: |
          echo "Listing files in images/api before npm install:"
          ls -la images/api
      - name: Install dependencies
        run: |
          cd images/api
          npm install
          cd ../..
      - name: List files after npm install
        run: |
          echo "Listing files in images/api after npm install:"
          ls -la images/api
      - name: Verify .env file before build
        run: |
          echo "Verifying .env file before build:"
          ls -la images/api/.env
          cat images/api/.env
      - name: Build
        run: |
          echo "Listing files before docker-compose build:"
          ls -la images/api
          cd images/api
          docker-compose --env-file .env build










